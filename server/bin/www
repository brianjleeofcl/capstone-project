#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

/*
  Socket.io configuration
*/

const knex = require('../knex')
const io = require('socket.io')(server)

io.on('connection', client => {
  client.on('initialize-browser-user', id => {
    knex('users').where('id', id).then(([user]) => client.join(user.email))
  })

  client.on('initialize-device-user', MAC => {
    knex('devices').where('MAC_address', MAC.toLowerCase()).then(([device]) => {
      if (device) {
        knex('devices').where('MAC_address', MAC.toLowerCase()).update('socket_id', client.id, '*').then(([updatedDevice]) => {
          return knex('users').where('id', device.user_id)
        }).then(([user]) => client.to(user.email).emit('device-ready', device.id))
      } else {
        client.join('unassigned')
      }
    })
  })

  client.on('instruction-record', ([socket_id, interval, iteration]) => {
    knex('devices').where('socket_id', socket_id).update('busy', true, '*').then(() => {
      client.to(socket_id).emit('record', [interval, iteration])
    })
  })

  client.on('recording-complete', socket_id => {
    knex('devices').where('socket_id', socket_id).update('busy', false, '*').then(([device]) => {
      return knex('users').where('id', device.user_id)
    }).then(([user]) => {
      client.to(user.email).emit('device-update')
    })
  })

  client.on('instruction', instruction => {
    console.log('instructions: ', instruction)
    client.send('Got it!')
  })

  client.on('disconnect', () => {
    knex('devices').where('socket_id', client.id).then(([device]) => {
      if (device) {
        knex('devices').where('id', device.id).update('socket_id', null, '*').then(([disconnectedDevice]) => {
          return knex('users').select('email').where('id', disconnectedDevice.user_id)
        }).then(([{ email }]) => client.to(email).emit('device-update'))
      }
    })
  })
})